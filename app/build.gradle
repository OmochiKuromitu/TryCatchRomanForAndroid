apply plugin: 'com.android.application'

/* ------ 静的解析 ------ */
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

/* =================================================
 * Android
 * ================================================= */

android {
    /* ------ コンパイル時に利用するSDKバージョン ------ */
    compileSdkVersion 25
    /* ------ ビルドツールバージョン ------ */
    buildToolsVersion '25.0.1'

    /* -------------------------------------------------
     * アプリ 設定
     * ------------------------------------------------- */

    defaultConfig {
        applicationId "jp.co.fake.TryCatchRoman"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // Enabling multidex support.
        multiDexEnabled true
    }

    /* ------ ビルドタイプ ------ */
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "RELEASE", "true"
            buildConfigField "boolean", "STAGING", "false"
        }
        staging {
            applicationIdSuffix ".stg"
            minifyEnabled false
            buildConfigField "boolean", "RELEASE", "false"
            buildConfigField "boolean", "STAGING", "true"
        }
        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            buildConfigField "boolean", "RELEASE", "false"
            buildConfigField "boolean", "STAGING", "false"
        }
    }

    /* ------ プロダクトフレーバー ------ */
    productFlavors {
        product {

        }
    }

    /* -------------------------------------------------
     * 静的解析 設定
     * ------------------------------------------------- */

    // Lint設定
    // 設定ファイルはプロジェクトルートのconfigフォルダに配置
    lintOptions {
        lintConfig rootProject.file('config/lint.xml') // Lintチェックの無効化設定.
        textReport true
        textOutput 'stdout'  // StdOutにLint結果を出力する
        htmlReport false
        htmlOutput file("${buildDir}/reports/lint/lint_result.html")
        xmlReport true
        xmlOutput file("${buildDir}/reports/lint/lint_result.xml")
        checkAllWarnings true
        checkReleaseBuilds true
        warningsAsErrors true  // Warnレベルの警告をErrorと同様に扱う
        abortOnError false     // Errorが見つかった場合にビルドを成功させる
        enable 'MissingTranslation' // 国際化対応確認
    }

    /*
     * 全ビルドバリアントに共通のタスクを設定する
     */
    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants').all { variant ->

        def variantName = variant.name.capitalize()

        // 自動生成ファイルは静的解析チェックの対象外とする.
        def autoGenerated = ['**/R.class',
                             '**/R$*.class',
                             '**/Manifest*.*',
                             'android/**/*.*',
                             '**/BuildConfig.*',
                             // ButterKnife
                             '**/*$ViewBinder*.*',
                             '**/*$ViewInjector*.*',
                             // Dagger2
                             '**/Dagger*.*',
                             '**/*_Provide*Factory.class.*',
                             // Orma
                             '**/*_Deleter.class',
                             '**/*_Relation.class',
                             '**/*_Selector.class',
                             '**/*_Updater.class',
                             '**/*_Schema.class',
                             '**/*_Schema$*.class',
                             '**/OrmaDatabase.class',
                             '**/OrmaDatabase$Builder.class',
        ]

        /*
         * Findbugsタスク
         *   see: https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
         */
        task("findbugs$variantName", type: FindBugs, dependsOn: "assemble$variantName") {

            group 'Reporting'
            description "Generate ${variantName} Findbugs reports."

            ignoreFailures = true
            reports {
                xml.enabled = true
                html.enabled = false
            }

            effort = 'max'
            reportLevel = 'low'
            source = files(android.sourceSets.main.java.srcDirs)
            classes = fileTree(dir: variant.javaCompiler.destinationDir, excludes: autoGenerated)
            classpath = files(configurations.compile.files)
            excludeFilter = rootProject.file('config/findbugs.xml')
        }

        /*
         * CheckStyleタスク
         *   see: https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html
         */
        task("checkstyle$variantName", type: Checkstyle, dependsOn: "assemble$variantName") {

            group 'Reporting'
            description "Generate ${variantName} Checkstyle reports."

            ignoreFailures = true
            reports {
                xml.enabled = true
                html.enabled = false
            }

            showViolations true  // CheckStyle解析結果をStdOutに出力する
            configFile = rootProject.file('config/checkstyle.xml')
            source = files(android.sourceSets.main.java.srcDirs)
            classpath = files(configurations.compile.files)
        }

        // CPDを追加
        check << {
            File outDir = new File("${buildDir}/reports/pmd/")
            outDir.mkdirs()

            ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
                    classpath: configurations.pmd.asPath)

            // 重複上限値
            ant.cpd(minimumTokenCount: '50', format: 'xml', encoding: 'utf-8',
                    outputFile: new File(outDir, 'cpd.xml')) {
                fileset(dir: "src/main/java") {
                    include(name: '**/*.java')
                }
            }
        }

        /*
         * デバッグビルドのCheckタスクで静的解析チェックを必須化
         * Lintは標準でCheckタスクに依存関係を持っているので指定しない.
         */
        if (variant.buildType.debuggable) {
            check.dependsOn "checkstyle${variantName}"
            check.dependsOn "findbugs${variantName}"
        }
    }
}

/* =================================================
 * 依存関係
 * ================================================= */

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    /* ------ 静的解析 ------ */
    // CheckStytle
    // findbugs
    // PMD
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.jakewharton:butterknife:8.5.1'
    compile 'com.android.support:design:25.0.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'
    compile 'com.android.support:support-v4:25.0.1'
    compile 'com.android.support:recyclerview-v7:25.0.1'
    testCompile 'junit:junit:4.12'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    checkstyle 'com.puppycrawl.tools:checkstyle:6.19'
    findbugs 'com.google.code.findbugs:findbugs:3.0.1'
    pmd 'net.sourceforge.pmd:pmd-java:5.4.2'
    provided 'org.projectlombok:lombok:1.16.18'
}
